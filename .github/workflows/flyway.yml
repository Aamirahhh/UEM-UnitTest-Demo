# This is a basic workflow to help you get started with Actions
 
name: Example GitHub Pipeline (Self-Hosted)
 
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "release" branch
   push:
    branches:
      - feature
 
env:
  #FLYWAY_LICENSE_KEY: ${{ secrets.FLYWAY_LICENSE_KEY }} #Repository Secret - Create this within the Projects Settings > Secrects > Actions section
  # If the first undo script is U002, this will validate all undo scripts up to and including that
  #FIRST_UNDO_SCRIPT: ${{ secrets.FIRST_UNDO_SCRIPT }}
  # Enable this for additional debug logging
  ACTIONS_RUNNER_DEBUG: true 
 
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Deploy Build
    # The type of runner that the job will run on
    runs-on: self-hosted
    #environment: 'build' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    env:
      #stage: 'Build'
      # Environment Secrets - Ensure all of the below have been created as an Environment Secret (Projects Settings > Secrets > Actions section, specially related to the environment in question) #
      databaseName: postgresql #${{ secrets.databaseName}} 
      JDBC: jdbc:postgresql://localhost:5432/movie #${{ secrets.JDBC }} 
      userName: vsdev #${{ secrets.userName }}
      password: 36%L*fq-aW!MWDjt #${{ secrets.password }}
      # End of Environment Secrets #
      #displayName: 'Build'
      executeBuild: true
      publishArtifacts: true
      path: C:\flyway-commandline-9.11.0-windows-x64\flyway-9.11.0
      FLYWAY_LICENSE_KEY: 
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #- uses: actions/checkout@v3
      
      # Runs the Flyway Clean command against the Build database
      - name: Clean DB
        #if: env.executeBuild == 'true'
        run: |
          cd C:\flyway-commandline-9.11.0-windows-x64\flyway-9.11.0
          flyway clean
        
      #flyway -user="${{ env.userName }}" -password="${{ env.password }}" -baselineOnMigrate="true"  -locations="filesystem:${{ env.path }}\sql" info clean info -url="${{ env.JDBC }}" -cleanDisabled='false'
        
      # Runs the Flyway Migrate command against the Build database
      - name: Migrate Build DB
        if: env.executeBuild == 'true'
        run: |
          flyway -user="${{ env.userName }}" -password="${{ env.password }}" -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ env.path }}\conf\flyway.conf" -locations="filesystem:${{ env.path }}\sql" info migrate info -url="${{ env.JDBC }}" -cleanDisabled='false'